// <auto-generated />
using System;
using HealthCertified.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthCertified.Migrations
{
    [DbContext(typeof(HealthContext))]
    [Migration("20190731101215_Health")]
    partial class Health
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthCertified.Model.CertifiedInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AliveBirth");

                    b.Property<int?>("AliveThenDeath");

                    b.Property<int?>("AlleyNumber");

                    b.Property<string>("Area");

                    b.Property<string>("BirthAndDeathOffice");

                    b.Property<string>("BirthArea");

                    b.Property<string>("BirthBy");

                    b.Property<DateTime>("BirthDate");

                    b.Property<int?>("BirthDisable");

                    b.Property<string>("BirthDistrict");

                    b.Property<string>("BirthHelperName");

                    b.Property<string>("BirthName");

                    b.Property<string>("BirthPlace");

                    b.Property<string>("BirthProvince");

                    b.Property<string>("BirthType");

                    b.Property<string>("BirthVillage");

                    b.Property<int?>("CertifyNumber");

                    b.Property<int?>("CertifyYear");

                    b.Property<int?>("ChildWeight");

                    b.Property<int?>("DeathBirth");

                    b.Property<string>("DisableType");

                    b.Property<string>("District");

                    b.Property<string>("DoctorName");

                    b.Property<int?>("FatherAge");

                    b.Property<bool?>("FatherAndMotherRelation");

                    b.Property<string>("FatherJob");

                    b.Property<string>("FatherName");

                    b.Property<string>("FatherNationalNumber");

                    b.Property<string>("FatherNationality");

                    b.Property<string>("FatherReligion");

                    b.Property<string>("Gender");

                    b.Property<string>("HealthAuthorities");

                    b.Property<string>("HealthDepartment");

                    b.Property<string>("HealthDepartmentBirth");

                    b.Property<string>("HospitalManager");

                    b.Property<string>("HospitalName");

                    b.Property<int?>("HouseNumber");

                    b.Property<string>("InformerLocation");

                    b.Property<string>("InformerName");

                    b.Property<string>("InformerRelation");

                    b.Property<string>("JobLocation");

                    b.Property<int?>("LengthOfPregnancy");

                    b.Property<string>("Mahallah");

                    b.Property<int?>("MotherAge");

                    b.Property<string>("MotherJob");

                    b.Property<string>("MotherName");

                    b.Property<string>("MotherNationality");

                    b.Property<string>("MotherReligion");

                    b.Property<string>("NationalDepartment");

                    b.Property<string>("NationalProvince");

                    b.Property<string>("OrganizerName");

                    b.Property<DateTime>("OrginazationDate");

                    b.Property<string>("Other");

                    b.Property<string>("PageNumber");

                    b.Property<int?>("ProjectionNumber");

                    b.Property<string>("Province");

                    b.Property<string>("RecordNumber");

                    b.Property<int?>("Sequence");

                    b.Property<string>("To");

                    b.Property<string>("TwinsNumber");

                    b.Property<string>("Village");

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.ToTable("CertifiedInfo");
                });

            modelBuilder.Entity("HealthCertified.Model.DeathCertified", b =>
                {
                    b.Property<int>("CertificateNo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate");

                    b.Property<DateTime>("BookIssueDate");

                    b.Property<string>("BookNo");

                    b.Property<string>("BornCounty");

                    b.Property<string>("BornProvince");

                    b.Property<string>("CertificateDepartment");

                    b.Property<string>("CertificateProvince");

                    b.Property<string>("DeathCounty");

                    b.Property<DateTime>("DeathDate");

                    b.Property<int>("DeathLocationID");

                    b.Property<string>("DeathPlace");

                    b.Property<string>("DeathProvince");

                    b.Property<string>("DeathTimeWrittenDay");

                    b.Property<string>("DeathTimeWrittenHour");

                    b.Property<string>("DeathTimeWrittenMonth");

                    b.Property<string>("DeathTimeWrittenYear");

                    b.Property<string>("DeathTownship");

                    b.Property<string>("DeathVillage");

                    b.Property<string>("DiskNo");

                    b.Property<string>("DoctorName");

                    b.Property<string>("DoctorName2");

                    b.Property<string>("DoctorWorkAddress");

                    b.Property<string>("DoctorWorkIn");

                    b.Property<string>("FamilyNo");

                    b.Property<string>("FatherNationality");

                    b.Property<string>("FatherReligion");

                    b.Property<string>("FinalReason");

                    b.Property<string>("FirstName");

                    b.Property<string>("FirstReason");

                    b.Property<DateTime>("FormIssueDate");

                    b.Property<string>("FormNo");

                    b.Property<string>("Gender");

                    b.Property<string>("HospitalName");

                    b.Property<string>("IdentifierName");

                    b.Property<string>("IdentifierNo");

                    b.Property<string>("InformerAddress");

                    b.Property<string>("InformerFullName");

                    b.Property<string>("InformerRelation");

                    b.Property<bool?>("IsPregnant");

                    b.Property<string>("IssueBook");

                    b.Property<DateTime>("IssueDatetime");

                    b.Property<string>("JudgeDecision");

                    b.Property<string>("LobbyNo");

                    b.Property<string>("LobbyType");

                    b.Property<string>("MobileNo");

                    b.Property<string>("MotherFirstName");

                    b.Property<string>("MotherNationality");

                    b.Property<string>("MotherReligion");

                    b.Property<string>("MotherSecondName");

                    b.Property<string>("MotherThirdName");

                    b.Property<string>("NationalDepartment");

                    b.Property<string>("NationalProvince");

                    b.Property<string>("Nationality");

                    b.Property<string>("Occupation");

                    b.Property<string>("OrganizerName");

                    b.Property<string>("OtherReasons");

                    b.Property<string>("PageNo");

                    b.Property<string>("PermanentAlley");

                    b.Property<string>("PermanentCounty");

                    b.Property<string>("PermanentHouseNo");

                    b.Property<string>("PermanentProvince");

                    b.Property<string>("PermanentTownship");

                    b.Property<string>("PermanentVillage");

                    b.Property<int?>("PregnantDuration");

                    b.Property<int?>("PregnantTypeID");

                    b.Property<string>("Province");

                    b.Property<string>("ReasonA");

                    b.Property<string>("ReasonB");

                    b.Property<string>("ReasonC");

                    b.Property<string>("ReasonD");

                    b.Property<string>("RecordNo");

                    b.Property<string>("RegisteredDepartment");

                    b.Property<string>("RegisteredHospital");

                    b.Property<string>("RegisteredNo");

                    b.Property<string>("RegisteredYear");

                    b.Property<int>("RelationID");

                    b.Property<string>("Religion");

                    b.Property<string>("SecondName");

                    b.Property<string>("SentFrom");

                    b.Property<string>("SymptomsAndDeath");

                    b.Property<string>("ThirdName");

                    b.Property<string>("To");

                    b.HasKey("CertificateNo");

                    b.ToTable("DeathCertified");
                });
#pragma warning restore 612, 618
        }
    }
}
